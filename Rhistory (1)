xyplot(tolerance ~ age | id, data=tolerance.pp, as.table=T)
options(digits=2)
cortol=cor(tolerance[ , 2:6])
stargazer(cortol)
xyplot(tolerance ~ age | id, data=tolerance.pp, as.table=T)
xyplot(tolerance ~ age | id, data=tolerance.pp, as.table=T)
xyplot(tolerance~age | id, data=tolerance.pp,
prepanel = function(x, y) prepanel.loess(x, y, family="gaussian"),
xlab = "Age", ylab = "Tolerance",
panel = function(x, y) {
panel.xyplot(x, y)
panel.loess(x,y, family="gaussian") },
ylim=c(0, 4), as.table=T)
tolerance.pp$agec=tolerance.pp$age-11 # centrar
# Generar regresiones individuales
by(tolerance.pp, id, function(x) summary(lm(tolerance ~ agec, data=x)))
int <- by(tolerance.pp, id, function(data)
coefficients(lm(tolerance ~ agec, data = data))[[1]])
int <- unlist(int)
names(int) <- NULL
summary(int)
int
stem(int, scale=2)
stem(int, scale=3)
stem(int, scale=1)
stem(int, scale=3)
rate <- by(tolerance.pp, id, function(data)
coefficients(lm(tolerance ~ age, data = data))[[2]])
rate <- unlist(rate)
names(rate) <- NULL
summary(rate)
stem(rate, scale=2)
rsq <- by(tolerance.pp, id, function(data)
summary(lm(tolerance ~ agec, data = data))$r.squared)
rsq <- unlist(rsq)
names(rsq) <- NULL
summary(rsq)
stem(rsq, scale=2)
xyplot(tolerance ~ age | id, data=tolerance.pp,
panel = function(x, y){
panel.xyplot(x, y)
panel.lmline(x, y)
}, ylim=c(0, 4), as.table=T)
interaction.plot(tolerance.pp$age, tolerance.pp$id, tolerance.pp$tolerance)
interaction.plot(tolerance.pp$age, tolerance.pp$id, fit, xlab="age", ylab="tolerance")
fit <- by(tolerance.pp, id, function(bydata) fitted.values(lm(tolerance ~ age, data=bydata)))
fit <- unlist(fit)
# plotting the linear fit by id
interaction.plot(tolerance.pp$age, tolerance.pp$id, fit, xlab="age", ylab="tolerance")
tolm <- tolerance.pp[male==1 , ]
fitmlist <- by(tolm, tolm$id, function(bydata) fitted.values(lm(tolerance ~ age, data=bydata)))
fitm <- unlist(fitmlist)
#appending the average for the whole group
lm.m <- fitted( lm(tolerance ~ age, data=tolm) )
names(lm.m) <- NULL
fit.m2 <- c(fitm, lm.m[1:5])
age.m <- c(tolm$age, seq(11,15))
id.m <- c(tolm$id, rep(111, 5))
#plotting the linear fit by id, males
#id.m=111 denotes the average value for males
interaction.plot(age.m, id.m, fit.m2, ylim=c(0, 4), xlab="AGE", ylab="TOLERANCE", lwd=1)
title(main="Males")
tol.pp.fm <- tolerance.pp[tolerance.pp$male==0 , ]
fit.fm <- by(tol.pp.fm, tol.pp.fm$id,
function(data) fitted.values(lm(tolerance ~ age, data=data)))
fit.fm1 <- unlist(fit.fm)
names(fit.fm1) <- NULL
lm.fm <- fitted( lm(tolerance ~ age, data=tol.pp.fm) )
names(lm.fm) <- NULL
fit.fm2 <- c(fit.fm1, lm.fm[1:5])
age.fm <- c(tol.pp.fm$age, seq(11,15))
id.fm <- c(tol.pp.fm$id, rep(1111, 5))
interaction.plot(age.fm, id.fm, fit.fm2, ylim=c(0, 4), xlab="AGE", ylab="TOLERANCE", lwd=1)
title(main="Females")
plot(tolerance$male, int, xlab="Male", ylab="Fitted initial status",
xlim=c(0, 1), ylim=c(0.5, 2.5))
plot(tolerance$male, rate, xlab="Male", ylab="Fitted rate of change",
xlim=c(0, 1), ylim=c(-0.4, .8))
load("/media/ntfs/Dropbox/proyectos/Fondap2013/Encuesta panel/2016/COESW1_R_V3.RData")
View(coesW1)
summary(coesW1$d1_01)
describe(coesW1$d1_01) # Estatus subjetivo
attach(coesW1)
summary(d1_01) # Estatus subjetivo
table(d1_01,d1_02)
summary(d1_01, d1_02) # Estatus subjetivo
summary("d1_01", "d1_02") # Estatus subjetivo
pacman::p_load(descr)
sex <- factor(c(rep("F", 900), rep("M", 900)))
income <- 100 * (rnorm(1800) + 5)
weight <- rep(1, 1800)
weight[sex == "F" & income > 500] <- 3
attr(income, "label") <- "Income"
attr(sex, "label") <- "Sex"
compmeans(income, sex, col = "lightgray", ylab = "income", xlab = "sex")
comp <- compmeans(income, sex, weight, plot = FALSE)
plot(comp, col = c("pink", "lightblue"), ylab = "income", xlab = "sex")
library(xtable)
# If the decimal separator in your country is a comma:
# options(OutDec = ",")
print(xtable(comp, caption = "Income according to sex", label = "tab:incsx"))
comp <- compmeans(income, sex, weight, plot = FALSE)
comp
compmeans(income, sex, col = "lightgray", ylab = "income", xlab = "sex")
compmeans(income, sex, col = "lightgray", ylab = "income", xlab = "sex")
compmeans(income, sex, col = "lightgray", ylab = "income", xlab = "sex")
compmeans(income, sex)
educ <- sample(c(1, 2), 200, replace = TRUE, prob = c(0.3, 0.7))
educ <- factor(educ, levels = c(1, 2), labels = c("Low", "High"))
opinion <- sample(c(1, 2, 9), 200, replace = TRUE,
prob = c(0.4, 0.55, 0.05))
opinion <- factor(opinion, levels = c(1, 2, 9),
labels = c("Disagree", "Agree", "Don't know"))
attr(educ, "label") <- "Education level"
attr(opinion, "label") <- "Opinion"
weight <- sample(c(10, 15, 19), 200, replace = TRUE)
crosstab(opinion, educ, xlab = "Education", ylab = "Opinion")
ct <- crosstab(opinion, educ, weight,
dnn = c("Opinion", "Education"),
user.missing.dep = "Don't know",
6 CrossTable
expected = TRUE, prop.c = TRUE, prop.r = TRUE,
plot = FALSE)
ct
ct <- crosstab(opinion, educ, weight,
dnn = c("Opinion", "Education"),
user.missing.dep = "Don't know",
6 CrossTable
expected = TRUE, prop.c = TRUE, prop.r = TRUE,
plot = FALSE)
ct <- crosstab(opinion, educ, weight,
dnn = c("Opinion", "Education"),
user.missing.dep = "Don't know",
expected = TRUE, prop.c = TRUE, prop.r = TRUE,
plot = FALSE)
ct
crosstab(opinion, educ)
crosstab(opinion, educ, user.missing.dep = "Missing")
crosstab(opinion, educ, user.missing.dep = "Missing")
crosstab(opinion, educ, user.missing.dep = "Missing")
crosstab(opinion, educ, user.missing.dep)
crosstab(opinion, educ, user.missing.dep="miss")
crosstab(opinion, educ)
crosstab(opinion, educ)
ct= crosstab(opinion, educ)
ct= crosstab(opinion, educ)
ct
ct= crosstab(opinion, educ, prop.c = TRUE)
ct
ct= crosstab(opinion, educ, prop.c = TRUE, prop.c=TRUE)
ct= crosstab(opinion, educ, prop.c = TRUE, prop.r=TRUE)
ct= crosstab(opinion, educ, prop.c = TRUE, prop.r=TRUE)
ct
compmeans(income, sex)
descr(income)
descr(sex)
freq(income)
freq(sex)
is.factor(sex)
freq(t4_01)
levels(t4_01)
names(t4_01)
freq(t4_01)
levels(t4_01)=list("tot desac"=1)
freq(t4_01)
levels(t4_01)=list("tot desac"=1, "desacuerdo"=2)
freq(t4_01)
load("/media/ntfs/Dropbox/proyectos/Fondap2013/Encuesta panel/2016/COESW1_R_V3.RData")
attach(coesW1)
levels(t4_01)=list("tot desac"=1, "desacuerdo"=2)
freq(t4_01)
freq(coesW1$t4_01)
freq(coesW1$t4_01)
table(d1_01,d1_02)
freq(coesW1$t4_01)
pacman::p_load(descr, # descriptivos,tablas y gr치ficos simples
plyr)
load("/media/ntfs/Dropbox/proyectos/Fondap2013/Encuesta panel/2016/COESW1_R_V3.RData")
attach(coesW1)
summary(d1_01, d1_02) # Estatus subjetivo
summary(d1_01) # Estatus subjetivo
table(d1_01,d1_02)
freq(coesW1$d1_01)
attach(coesW1)
summary(d1_01) # Estatus subjetivo
freq(d1_01)
freq(d2_01)
revalue(d2_01,1="tot desac")
revalue(d2_01,"1"="tot desac")
revalue(d2_01,c(1="tot desac"))
revalue(d2_01,c("1"="tot desac"))
freq(d2_01)
revalue(d2_01,c("1"="tot desac"))
pacman::p_load(descr, # descriptivos,tablas y gr치ficos simples
plyr)
load("/media/ntfs/Dropbox/proyectos/Fondap2013/Encuesta panel/2016/COESW1_R_V3.RData")
attach(coesW1)
summary(d1_01) # Estatus subjetivo
freq(d1_01)
summary(d1_01) # Estatus subjetivo
pacman::p_load(descr, # descriptivos,tablas y gr치ficos simples
plyr,
sjPlot,
sjmisc)
sjp.frq(d1_01)
freq(d1_01)
sjp.frq(d1_01)
freq(d1_01)
str(d1_01)
sjp.frq(d1_01)
freq(d2_01)
sjp.frq(d2_01)
sjp.frq(d2_02,
coord.flip = TRUE,
hjust = "top")
sjp.frq(d2_02, coord.flip = TRUE)
sjp.frq(d2_01, coord.flip = TRUE)
sjp.frq(d1_01, show.values = FALSE)
sjp.frq(d1_01, show.values = TRUE)
freq(d1_01)
d1_01<-recode(d1_01,"88=NA;99=NA")
pacman::p_load(descr, # descriptivos,tablas y gr치ficos simples
plyr,
sjPlot,
sjmisc,
car)
d1_01<-recode(d1_01,"88=NA;99=NA")
freq(d1_01)
str(d1_01)
sjp.frq(d1_01, show.values = TRUE)
freq(d2_01)
freq(d2_01)
freq(d2_02) #
freq(d2_03) # Salud
d2_01<-recode(d2_01,"88=NA;99=NA")
d2_02<-recode(d2_02,"88=NA;99=NA")
names(coesW1)
coesW1[ , 197:199] <- lapply(coesW1[ , 197:199] ,
FUN = function(x) recode(x, "88=NA;99=NA"))
freq(d2_03) # Salud
coesW1[ , 197:199] <- lapply(coesW1[ , 197:199] ,
FUN = function(x) recode(x, "8=NA;9=NA"))
freq(d2_03) # Salud
attach(coesW1)
freq(d2_03) # Salud
[ , 197:199] <- lapply([ , 197:199] ,
FUN = function(x) recode(x, "8=NA;9=NA"))
sjp.frq(d2_01, coord.flip = TRUE)
sjp.frq(d2_02)
sjp.frq(d2_01, coord.flip = TRUE)
coesW1[ , 197:199] <- lapply(coesW1[ , 197:199] ,
FUN = function(x) recode(x, "8=NA;9=NA"))
attach(coesW1)
sjp.frq(d2_01, coord.flip = TRUE)
sjp.frq(coesW1$d2_01, coord.flip = TRUE)
load("/media/ntfs/Dropbox/proyectos/Fondap2013/Encuesta panel/2016/COESW1_R_V3.RData")
attach(coesW1)
str(d1_01)
freq(d1_01)
d1_01<-recode(d1_01,"88=NA;99=NA")
sjp.frq(d1_01) # problema con los value labels
sjp.frq(d1_01, show.values = TRUE)
sjp.frq(d1_01) # problema con los value labels
str(d1_01)
# 0.1 Libraries & setwd ----------------- ####
load("./objects/redistrib.rda")
setwd("/media/ntfs/Dropbox/proyectos y papers compartidos/meritocracy_pref_international/loc_merit_pref_int")
load("./objects/redistrib.rda")
names(redistrib)
dim(redistrib)
cfa_red1 <- '
# latent variables
redist =~ income_dif + unemployed + taxes
accum  =~ health + educ
'
fit_red1 <- cfa(cfa_red1,data=redistrib, missing = "ML")
summary(fit_red1, fit.measures=TRUE,standardized=TRUE)
# 0.1 Libraries ------------------------- ####
# Libraries
pacman::p_load(sjPlot,
sjmisc, # several functions,ej read_stata
descr,
memisc,  # codebook
psych, # cor2latex
corrplot, # graph correlations
lavaan,
stargazer,
semTools,
plyr, # count
dplyr,
car, # recode
ggplot2,
Hmisc,
tidyverse,
data.table,
stringr,
countrycode,
lme4,
texreg,
mice,
ggrepel, # for scatter labels in sjp.scatter
semPlot)
# Set directory
setwd("/media/ntfs/Dropbox/proyectos y papers compartidos/meritocracy_pref_international")
cfa_red1 <- '
# latent variables
redist =~ income_dif + unemployed + taxes
accum  =~ health + educ
'
fit_red1 <- cfa(cfa_red1,data=redistrib, missing = "ML")
summary(fit_red1, fit.measures=TRUE,standardized=TRUE)
# Path
semPaths(fit_red1,layout = "tree2", rotation = 2,
intercepts = FALSE,	style = "lisrel", curvePivot = TRUE,
cardinal = TRUE)
dev.copy(png,"./results/path_red1.png",width=750,height=600)
dev.off()
semPaths(fit_red1,layout = "tree2", rotation = 2,
intercepts = FALSE,	style = "lisrel", curvePivot = TRUE,
cardinal = TRUE)
semPaths(fit_red1,layout = "tree2", rotation = 2,
intercepts = FALSE,	style = "lisrel", curvePivot = TRUE,
cardinal = TRUE)
fit_red1 <- cfa(cfa_red1,data=redistrib, missing = "ML")
semPaths(fit_red1,layout = "tree2", rotation = 2,
intercepts = FALSE,	style = "lisrel", curvePivot = TRUE,
cardinal = TRUE)
dev.off()
semPaths(fit_red1,layout = "tree2", rotation = 2,
intercepts = FALSE,	style = "lisrel", curvePivot = TRUE,
cardinal = TRUE)
dev.copy(png,"./results/path_red1.png",width=750,height=600)
dev.off()
names(redistrib)
out <- mice(redistrib[3:7], m=5)
D1 <- complete(out, 1)
D2 <- complete(out, 2)
D3 <- complete(out, 3)
D4 <- complete(out, 4)
D5 <- complete(out, 5)
fit1 <- cfa(fit_red1, data=D1)
fit2 <- cfa(fit_red1, data=D2)
fit_red1 <- cfa(cfa_red1,data=redistrib, missing = "ML")
summary(fit_red1, fit.measures=TRUE,standardized=TRUE)
fit1 <- cfa(fit_red1, data=D1)
fit1 <- cfa(cfa_red1, data=D1)
fit2 <- cfa(cfa_red1, data=D2)
fit3 <- cfa(cfa_red1, data=D3)
fit4 <- cfa(cfa_red1, data=D4)
fit5 <- cfa(cfa_red1, data=D5)
# predict scores for all models
p1 <- predict(fit1)
p2 <- predict(fit2)
p3 <- predict(fit3)
p4 <- predict(fit4)
p5 <- predict(fit5)
# compute 'average' across 5 sets of scores:
scores <- (p1 + p2 + p3 + p4 + p5)/5
scores_dat=as.data.frame(scores)
dim(scores_dat)
str(scores_dat)
dim(redistrib)
redistrib_sco=cbind(redistrib,scores)
summary(redistrib_tot$redist)
summary(redistrib_sco$redist)
summary(redistrib_sco$accum)
save(redistrib_sco, file="./objects/redistrib_sco.rda")
getwd()
setwd("/media/ntfs/Dropbox/proyectos y papers compartidos/meritocracy_pref_international/loc_merit_pref_int")
save(redistrib_sco, file="./objects/redistrib_sco.rda")
freq(redistrib$income_dif)
load("./objects/redistrib.rda")
load("../loc_merit_meassure/objects/getahead.rda")
load("../loc_merit_meassure/objects/detearn.rda")
aux1 <- merge(getahead,redistrib,by=c("id","v5"))
merit_redist=merge(aux1,detearn,by=c("id","v5"))
names(merit_redist)
dimd(merit_redist)
dim(merit_redist)
cfa_mer_red1 <- '
# latent variables
merit =~ hwork + ambition
parent=~ wealthy + pareduc
backg=~ race + gender
network=~ people + polcone
bmerit =~ welljob + hardjob
need=~ family + child
redist =~ income_dif + unemployed + taxes
accum  =~ health + educ
'
fit_mer_red1 <- cfa(cfa_mer_red1,data=merit_redis,
missing = "ML")
dim(merit_redist)
fit_mer_red1 <- cfa(cfa_mer_red1,data=merit_redist,
missing = "ML")
summary(fit_mer_red1, fit.measures=TRUE,standardized=TRUE)
semPaths(fit_mer_red1,layout = "tree", rotation = 2,
intercepts = FALSE, style = "lisrel", curvePivot = TRUE,
sizeMan = 3.5, sizeLat = 6)
semPaths(fit_mer_red1,layout = "tree", rotation = 2,
intercepts = FALSE, style = "lisrel", curvePivot = TRUE,
sizeMan = 3.5, sizeLat = 6)
dev.off()
semPaths(fit_mer_red1,layout = "tree", rotation = 2,
intercepts = FALSE, style = "lisrel", curvePivot = TRUE,
sizeMan = 3.5, sizeLat = 6)
semPaths(fit_mer_red1,layout = "tree2", rotation = 2,
intercepts = FALSE, style = "lisrel", curvePivot = TRUE,
sizeMan = 3.5, sizeLat = 6)
semPaths(fit_mer_red1,layout = "circle", rotation = 2,
intercepts = FALSE, style = "lisrel", curvePivot = TRUE,
sizeMan = 3.5, sizeLat = 6)
semPaths(fit_mer_red1,layout = "circle", rotation = 1,
intercepts = FALSE, style = "lisrel", curvePivot = TRUE,
sizeMan = 3.5, sizeLat = 6)
semPaths(fit_mer_red1,layout = "circle", rotation = 1,
intercepts = FALSE, style = "lisrel", curvePivot = TRUE,
sizeMan = 4, sizeLat = 6)
semPaths(fit_mer_red1,layout = "circle", rotation = 3,
intercepts = FALSE, style = "lisrel", curvePivot = TRUE,
sizeMan = 4, sizeLat = 6)
semPaths(fit_mer_red1,layout = "circle", rotation = 3,
intercepts = FALSE, style = "lisrel", curvePivot = TRUE,
sizeMan = 4, sizeLat = 6)
semPaths(fit_mer_red1,layout = "circle", rotation = 3,
intercepts = FALSE, style = "lisrel", curvePivot = TRUE,
sizeMan = 5, sizeLat = 6)
dev.copy(png,"./results/path_mer_red1.png",width=800,
height=650);  dev.off()
semPaths(fit_mer_red1,layout = "circle2", rotation = 3,
intercepts = FALSE, style = "lisrel", curvePivot = TRUE,
sizeMan = 5, sizeLat = 6)
semPaths(fit_mer_red1,layout = "circle2", rotation = 3,
intercepts = FALSE, style = "lisrel", curvePivot = TRUE,
sizeMan = 5, sizeLat = 6)
semPaths(fit_mer_red1,layout = "tree", rotation = 3,
intercepts = FALSE, style = "lisrel", curvePivot = TRUE,
sizeMan = 5, sizeLat = 6)
semPaths(fit_mer_red1,layout = "tree3", rotation = 3,
intercepts = FALSE, style = "lisrel", curvePivot = TRUE,
sizeMan = 5, sizeLat = 6)
semPaths(fit_mer_red1,layout = "tree4", rotation = 3,
intercepts = FALSE, style = "lisrel", curvePivot = TRUE,
sizeMan = 5, sizeLat = 6)
semPaths(fit_mer_red1,layout = "tree2", rotation = 3,
intercepts = FALSE, style = "lisrel", curvePivot = TRUE,
sizeMan = 5, sizeLat = 6)
semPaths(fit_mer_red1,layout = "circle", rotation = 3,
intercepts = FALSE, style = "lisrel", curvePivot = TRUE,
sizeMan = 5, sizeLat = 6)
names(merit_redist)
fit_mer_redc <- cfa(cfa_mer_red1,data=merit_redist,
ordered = names(merit_redist[3:10,19:29]))
summary(fit_mer_redc, fit.measures=TRUE,standardized=TRUE)
fit_mer_red2 <- cfa(cfa_mer_red2,data=merit_redist,
missing = "ML")
cfa_mer_red2 <- '
# latent variables
merit =~ hwork + ambition
parent=~ wealthy + pareduc
backg=~ race + gender
network=~ people + polcone
bmerit =~ welljob + hardjob
need=~ family + child
redist =~ income_dif + unemployed + taxes
accum  =~ health + educ
unmerit =~ parent + backg + network
'
fit_mer_red2 <- cfa(cfa_mer_red2,data=merit_redist,
missing = "ML")
summary(fit_mer_red2, fit.measures=TRUE,standardized=TRUE)
semPaths(fit_mer_red2,layout = "tree", rotation = 2,
intercepts = FALSE, style = "lisrel", curvePivot = TRUE,
sizeMan = 5, sizeLat = 6)
semPaths(fit_mer_red2,layout = "tree", rotation = 2,
intercepts = FALSE, style = "lisrel", curvePivot = TRUE,
sizeMan = 4, sizeLat = 6)
dev.copy(png,"./results/path_mer_red2.png",width=800,
height=650);  dev.off()
sem_mer_red1 <- '
# latent variables
merit =~ hwork + ambition
parent=~ wealthy + pareduc
backg=~ race + gender
network=~ people + polcone
bmerit =~ welljob + hardjob
need=~ family + child
redist =~ income_dif + unemployed + taxes
accum  =~ health + educ
unmerit =~ parent + backg + network
'
fitsem_mer_red1 <- sem(sem_mer_red1,data=merit_redist, missing = "ML")
sem_mer_red1 <- '
# latent variables
merit =~ hwork + ambition
parent=~ wealthy + pareduc
backg=~ race + gender
network=~ people + polcone
bmerit =~ welljob + hardjob
need=~ family + child
redist =~ income_dif + unemployed + taxes
accum  =~ health + educ
unmerit =~ parent + backg + network
# regressions
redist + accum ~ merit + unmerit + bmerit + need
'
fitsem_mer_red1 <- sem(sem_mer_red1,data=merit_redist,
missing = "ML")
summary(fitsem_mer_red1, fit.measures=TRUE,standardized=TRUE)
semPaths(fitsem_mer_red1,layout = "tree", rotation = 2,
intercepts = FALSE, style = "lisrel", curvePivot = TRUE,
sizeMan = 4, sizeLat = 6)
